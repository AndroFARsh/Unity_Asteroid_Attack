//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMaxScore;

    public static Entitas.IMatcher<GameEntity> MaxScore {
        get {
            if (_matcherMaxScore == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MaxScore);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMaxScore = matcher;
            }

            return _matcherMaxScore;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Game.Level.MaxScoreComponent maxScore { get { return (Code.Game.Level.MaxScoreComponent)GetComponent(GameComponentsLookup.MaxScore); } }
    public int MaxScore { get { return maxScore.Value; } }
    public bool hasMaxScore { get { return HasComponent(GameComponentsLookup.MaxScore); } }

    public GameEntity AddMaxScore(int newValue) {
        var index = GameComponentsLookup.MaxScore;
        var component = (Code.Game.Level.MaxScoreComponent)CreateComponent(index, typeof(Code.Game.Level.MaxScoreComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMaxScore(int newValue) {
        var index = GameComponentsLookup.MaxScore;
        var component = (Code.Game.Level.MaxScoreComponent)CreateComponent(index, typeof(Code.Game.Level.MaxScoreComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMaxScore() {
        RemoveComponent(GameComponentsLookup.MaxScore);
        return this;
    }
}
