//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCollideRadius;

    public static Entitas.IMatcher<GameEntity> CollideRadius {
        get {
            if (_matcherCollideRadius == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CollideRadius);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCollideRadius = matcher;
            }

            return _matcherCollideRadius;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Game.Common.CollideRadiusComponent collideRadius { get { return (Code.Game.Common.CollideRadiusComponent)GetComponent(GameComponentsLookup.CollideRadius); } }
    public float CollideRadius { get { return collideRadius.Value; } }
    public bool hasCollideRadius { get { return HasComponent(GameComponentsLookup.CollideRadius); } }

    public GameEntity AddCollideRadius(float newValue) {
        var index = GameComponentsLookup.CollideRadius;
        var component = (Code.Game.Common.CollideRadiusComponent)CreateComponent(index, typeof(Code.Game.Common.CollideRadiusComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCollideRadius(float newValue) {
        var index = GameComponentsLookup.CollideRadius;
        var component = (Code.Game.Common.CollideRadiusComponent)CreateComponent(index, typeof(Code.Game.Common.CollideRadiusComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCollideRadius() {
        RemoveComponent(GameComponentsLookup.CollideRadius);
        return this;
    }
}
