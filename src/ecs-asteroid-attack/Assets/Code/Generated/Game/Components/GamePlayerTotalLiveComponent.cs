//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerTotalLive;

    public static Entitas.IMatcher<GameEntity> PlayerTotalLive {
        get {
            if (_matcherPlayerTotalLive == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerTotalLive);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerTotalLive = matcher;
            }

            return _matcherPlayerTotalLive;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Game.GameState.PlayerTotalLiveComponent playerTotalLive { get { return (Code.Game.GameState.PlayerTotalLiveComponent)GetComponent(GameComponentsLookup.PlayerTotalLive); } }
    public int PlayerTotalLive { get { return playerTotalLive.Value; } }
    public bool hasPlayerTotalLive { get { return HasComponent(GameComponentsLookup.PlayerTotalLive); } }

    public GameEntity AddPlayerTotalLive(int newValue) {
        var index = GameComponentsLookup.PlayerTotalLive;
        var component = (Code.Game.GameState.PlayerTotalLiveComponent)CreateComponent(index, typeof(Code.Game.GameState.PlayerTotalLiveComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplacePlayerTotalLive(int newValue) {
        var index = GameComponentsLookup.PlayerTotalLive;
        var component = (Code.Game.GameState.PlayerTotalLiveComponent)CreateComponent(index, typeof(Code.Game.GameState.PlayerTotalLiveComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemovePlayerTotalLive() {
        RemoveComponent(GameComponentsLookup.PlayerTotalLive);
        return this;
    }
}
