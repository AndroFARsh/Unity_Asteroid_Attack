//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMoveAcceleration;

    public static Entitas.IMatcher<GameEntity> MoveAcceleration {
        get {
            if (_matcherMoveAcceleration == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MoveAcceleration);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMoveAcceleration = matcher;
            }

            return _matcherMoveAcceleration;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Game.Movement.MoveAccelerationComponent moveAcceleration { get { return (Code.Game.Movement.MoveAccelerationComponent)GetComponent(GameComponentsLookup.MoveAcceleration); } }
    public float MoveAcceleration { get { return moveAcceleration.Value; } }
    public bool hasMoveAcceleration { get { return HasComponent(GameComponentsLookup.MoveAcceleration); } }

    public GameEntity AddMoveAcceleration(float newValue) {
        var index = GameComponentsLookup.MoveAcceleration;
        var component = (Code.Game.Movement.MoveAccelerationComponent)CreateComponent(index, typeof(Code.Game.Movement.MoveAccelerationComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMoveAcceleration(float newValue) {
        var index = GameComponentsLookup.MoveAcceleration;
        var component = (Code.Game.Movement.MoveAccelerationComponent)CreateComponent(index, typeof(Code.Game.Movement.MoveAccelerationComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMoveAcceleration() {
        RemoveComponent(GameComponentsLookup.MoveAcceleration);
        return this;
    }
}
