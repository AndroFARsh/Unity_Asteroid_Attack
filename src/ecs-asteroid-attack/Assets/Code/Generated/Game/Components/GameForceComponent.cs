//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherForce;

    public static Entitas.IMatcher<GameEntity> Force {
        get {
            if (_matcherForce == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Force);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherForce = matcher;
            }

            return _matcherForce;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Game.Common.ForceComponent force { get { return (Code.Game.Common.ForceComponent)GetComponent(GameComponentsLookup.Force); } }
    public UnityEngine.Vector2 Force { get { return force.Value; } }
    public bool hasForce { get { return HasComponent(GameComponentsLookup.Force); } }

    public GameEntity AddForce(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.Force;
        var component = (Code.Game.Common.ForceComponent)CreateComponent(index, typeof(Code.Game.Common.ForceComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceForce(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.Force;
        var component = (Code.Game.Common.ForceComponent)CreateComponent(index, typeof(Code.Game.Common.ForceComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveForce() {
        RemoveComponent(GameComponentsLookup.Force);
        return this;
    }
}
