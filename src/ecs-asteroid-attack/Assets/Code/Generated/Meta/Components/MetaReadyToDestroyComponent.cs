//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherReadyToDestroy;

    public static Entitas.IMatcher<MetaEntity> ReadyToDestroy {
        get {
            if (_matcherReadyToDestroy == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.ReadyToDestroy);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherReadyToDestroy = matcher;
            }

            return _matcherReadyToDestroy;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by KSyndicate.CustomGenerators.Plugins.SingleValueComponentEntityApiInterfaceGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity : IReadyToDestroyEntity { }

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    static readonly Code.Common.ReadyToDestroyComponent readyToDestroyComponent = new Code.Common.ReadyToDestroyComponent();

    public bool isReadyToDestroy {
        get { return HasComponent(MetaComponentsLookup.ReadyToDestroy); }
        set {
            if (value != isReadyToDestroy) {
                var index = MetaComponentsLookup.ReadyToDestroy;
                if (value) {
                    var componentPool = GetComponentPool(index);
                    var component = componentPool.Count > 0
                            ? componentPool.Pop()
                            : readyToDestroyComponent;

                    AddComponent(index, component);
                } else {
                    RemoveComponent(index);
                }
            }
        }
    }
}
