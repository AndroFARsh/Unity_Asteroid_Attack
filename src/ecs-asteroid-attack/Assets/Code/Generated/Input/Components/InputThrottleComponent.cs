//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class InputMatcher {

    static Entitas.IMatcher<InputEntity> _matcherThrottle;

    public static Entitas.IMatcher<InputEntity> Throttle {
        get {
            if (_matcherThrottle == null) {
                var matcher = (Entitas.Matcher<InputEntity>)Entitas.Matcher<InputEntity>.AllOf(InputComponentsLookup.Throttle);
                matcher.componentNames = InputComponentsLookup.componentNames;
                _matcherThrottle = matcher;
            }

            return _matcherThrottle;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class InputEntity {

    public Code.Game.Input.ThrottleComponent throttle { get { return (Code.Game.Input.ThrottleComponent)GetComponent(InputComponentsLookup.Throttle); } }
    public float Throttle { get { return throttle.Value; } }
    public bool hasThrottle { get { return HasComponent(InputComponentsLookup.Throttle); } }

    public InputEntity AddThrottle(float newValue) {
        var index = InputComponentsLookup.Throttle;
        var component = (Code.Game.Input.ThrottleComponent)CreateComponent(index, typeof(Code.Game.Input.ThrottleComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public InputEntity ReplaceThrottle(float newValue) {
        var index = InputComponentsLookup.Throttle;
        var component = (Code.Game.Input.ThrottleComponent)CreateComponent(index, typeof(Code.Game.Input.ThrottleComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public InputEntity RemoveThrottle() {
        RemoveComponent(InputComponentsLookup.Throttle);
        return this;
    }
}
